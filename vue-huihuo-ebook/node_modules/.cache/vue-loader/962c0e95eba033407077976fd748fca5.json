{"remainingRequest":"E:\\JodPreparation\\Practice\\项目\\huihuo-ebook\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\JodPreparation\\Practice\\项目\\huihuo-ebook\\src\\views\\store\\StoreSpeaking.vue?vue&type=style&index=0&id=cefd1808&lang=scss&rel=stylesheet%2Fscss&scoped=true&","dependencies":[{"path":"E:\\JodPreparation\\Practice\\项目\\huihuo-ebook\\src\\views\\store\\StoreSpeaking.vue","mtime":1588929760192},{"path":"E:\\JodPreparation\\Practice\\项目\\huihuo-ebook\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\JodPreparation\\Practice\\项目\\huihuo-ebook\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"E:\\JodPreparation\\Practice\\项目\\huihuo-ebook\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"E:\\JodPreparation\\Practice\\项目\\huihuo-ebook\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\JodPreparation\\Practice\\项目\\huihuo-ebook\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\JodPreparation\\Practice\\项目\\huihuo-ebook\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCkBpbXBvcnQgIi4uLy4uL2Fzc2V0cy9zdHlsZXMvZ2xvYmFsIjsNCg0KLmJvb2stc3BlYWtpbmcgew0KICBmb250LXNpemU6IHB4MnJlbSgxNik7DQogIHdpZHRoOiAxMDAlOw0KICBiYWNrZ3JvdW5kOiB3aGl0ZTsNCg0KICAuY29udGVudC13cmFwcGVyIHsNCiAgICB3aWR0aDogMTAwJTsNCg0KICAgIC5ib29rLXNwZWFrLXRpdGxlLXdyYXBwZXIgew0KICAgICAgZGlzcGxheTogZmxleDsNCiAgICAgIHBhZGRpbmc6IHB4MnJlbSgxNSk7DQogICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94Ow0KICAgICAgYm9yZGVyLWJvdHRvbTogcHgycmVtKDEpIHNvbGlkICNlZWU7DQoNCiAgICAgIC5pY29uLXNwZWFrLXdyYXBwZXIgew0KICAgICAgICBmbGV4OiAwIDAgcHgycmVtKDQwKTsNCiAgICAgICAgQGluY2x1ZGUgbGVmdDsNCg0KICAgICAgICAuaWNvbi1zcGVhayB7DQogICAgICAgICAgZm9udC1zaXplOiBweDJyZW0oMjQpOw0KICAgICAgICAgIGNvbG9yOiAjOTk5Ow0KICAgICAgICB9DQogICAgICB9DQoNCiAgICAgIC5zcGVhay10aXRsZS13cmFwcGVyIHsNCiAgICAgICAgZmxleDogMTsNCiAgICAgICAgQGluY2x1ZGUgbGVmdDsNCg0KICAgICAgICAuc3BlYWstdGl0bGUgew0KICAgICAgICAgIGZvbnQtc2l6ZTogcHgycmVtKDE2KTsNCiAgICAgICAgICBmb250LXdlaWdodDogYm9sZDsNCiAgICAgICAgICBjb2xvcjogIzY2NjsNCiAgICAgICAgfQ0KICAgICAgfQ0KDQogICAgICAuaWNvbi1kb3duLXdyYXBwZXIgew0KICAgICAgICBmbGV4OiAwIDAgcHgycmVtKDQwKTsNCiAgICAgICAgQGluY2x1ZGUgcmlnaHQ7DQoNCiAgICAgICAgLmljb24tdXAgew0KICAgICAgICAgIGZvbnQtc2l6ZTogcHgycmVtKDEyKTsNCiAgICAgICAgICBjb2xvcjogIzk5OTsNCiAgICAgICAgfQ0KDQogICAgICAgIC5pY29uLWRvd24yIHsNCiAgICAgICAgICBmb250LXNpemU6IHB4MnJlbSgxMik7DQogICAgICAgICAgY29sb3I6ICM5OTk7DQogICAgICAgIH0NCiAgICAgIH0NCiAgICB9DQoNCiAgICAuYm9vay1kZXRhaWwtY29udGVudC13cmFwcGVyIHsNCiAgICAgIHdpZHRoOiAxMDAlOw0KICAgICAgYm9yZGVyLWJvdHRvbTogcHgycmVtKDEpIHNvbGlkICNlZWU7DQogICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94Ow0KDQogICAgICAuYm9vay1kZXRhaWwtY29udGVudC1saXN0LXdyYXBwZXIgew0KICAgICAgICBwYWRkaW5nOiBweDJyZW0oMTApIHB4MnJlbSgxNSk7DQoNCiAgICAgICAgLmxvYWRpbmctdGV4dC13cmFwcGVyIHsNCiAgICAgICAgICB3aWR0aDogMTAwJTsNCg0KICAgICAgICAgIC5sb2FkaW5nLXRleHQgew0KICAgICAgICAgICAgZm9udC1zaXplOiBweDJyZW0oMTQpOw0KICAgICAgICAgICAgY29sb3I6ICM5OTk7DQogICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgLmJvb2stZGV0YWlsLWNvbnRlbnQtaXRlbS13cmFwcGVyIHsNCiAgICAgICAgICAuYm9vay1kZXRhaWwtY29udGVudC1pdGVtIHsNCiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7DQogICAgICAgICAgICBwYWRkaW5nOiBweDJyZW0oMTUpIDA7DQogICAgICAgICAgICBmb250LXNpemU6IHB4MnJlbSgxNCk7DQogICAgICAgICAgICBsaW5lLWhlaWdodDogcHgycmVtKDE2KTsNCiAgICAgICAgICAgIGNvbG9yOiAjMzMzOw0KICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogcHgycmVtKDEpIHNvbGlkICNlZWU7DQoNCiAgICAgICAgICAgICY6bGFzdC1jaGlsZCB7DQogICAgICAgICAgICAgIGJvcmRlci1ib3R0b206IG5vbmU7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC5ib29rLWRldGFpbC1jb250ZW50LW5hdmlnYXRpb24tdGV4dCB7DQogICAgICAgICAgICAgIGZsZXg6IDE7DQogICAgICAgICAgICAgIHdpZHRoOiAxMDAlOw0KICAgICAgICAgICAgICBAaW5jbHVkZSBlbGxpcHNpczsNCg0KICAgICAgICAgICAgICAmLmlzLXBsYXlpbmcgew0KICAgICAgICAgICAgICAgIGNvbG9yOiAkY29sb3ItYmx1ZTsNCiAgICAgICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDsNCiAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogcHgycmVtKDEwKTsNCiAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgfQ0KICAgIH0NCiAgfQ0KDQogIC5ib29rLXdyYXBwZXIgew0KICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgICBib3R0b206IC0xMDAlOw0KICAgIHotaW5kZXg6IDEwMDsNCiAgfQ0KfQ0K"},{"version":3,"sources":["StoreSpeaking.vue"],"names":[],"mappingsxBA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"StoreSpeaking.vue","sourceRoot":"src/views/store","sourcesContent":["<!-- 听书组件 -->\r\n<template>\r\n  <div class=\"book-speaking\">\r\n    <!-- title -->\r\n    <detail-title @back=\"back\" ref=\"title\"></detail-title>\r\n    <scroll\r\n      class=\"content-wrapper\"\r\n      :top=\"42\"\r\n      :bottom=\"scrollBottom\"\r\n      :ifNoScroll=\"disableScroll\"\r\n      @onScroll=\"onScroll\"\r\n      ref=\"scroll\"\r\n    >\r\n      <!-- 图书详情 -->\r\n      <book-info\r\n        :cover=\"cover\"\r\n        :title=\"title\"\r\n        :author=\"author\"\r\n        :desc=\"desc\"\r\n      ></book-info>\r\n      <div class=\"book-speak-title-wrapper\">\r\n        <div class=\"icon-speak-wrapper\">\r\n          <span class=\"icon-speak\"></span>\r\n        </div>\r\n        <div class=\"speak-title-wrapper\">\r\n          <span class=\"speak-title\">{{ $t(\"speak.voice\") }}</span>\r\n        </div>\r\n        <div class=\"icon-down-wrapper\" @click=\"toggleContent\">\r\n          <span\r\n            :class=\"{ 'icon-down2': !ifShowContent, 'icon-up': ifShowContent }\"\r\n          ></span>\r\n        </div>\r\n      </div>\r\n      <!-- 图书章节详情 -->\r\n      <div class=\"book-detail-content-wrapper\" v-show=\"ifShowContent\">\r\n        <div class=\"book-detail-content-list-wrapper\">\r\n          <div class=\"loading-text-wrapper\" v-if=\"!this.navigation\">\r\n            <span class=\"loading-text\">{{ $t(\"detail.loading\") }}</span>\r\n          </div>\r\n          <div class=\"book-detail-content-item-wrapper\">\r\n            <div\r\n              class=\"book-detail-content-item\"\r\n              v-for=\"(item, index) in flatNavigation\"\r\n              :key=\"index\"\r\n              @click=\"speak(item, index)\"\r\n            >\r\n              <!-- 播放动画 -->\r\n              <speak-playing\r\n                v-if=\"playingIndex === index\"\r\n                :number=\"5\"\r\n                ref=\"speakPlaying\"\r\n              ></speak-playing>\r\n              <div\r\n                class=\"book-detail-content-navigation-text\"\r\n                :class=\"{ 'is-playing': playingIndex === index }\"\r\n                v-if=\"item.label\"\r\n              >\r\n                {{ item.label }}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <!-- 播放器 -->\r\n      <audio\r\n        @canplay=\"onCanPlay\"\r\n        @timeupdate=\"onTimeUpdate\"\r\n        @ended=\"onAudioEnded\"\r\n        ref=\"audio\"\r\n      ></audio>\r\n    </scroll>\r\n    <!-- 播放面板-->\r\n    <bottom\r\n      :chapter=\"chapter\"\r\n      :currentSectionIndex=\"currentSectionIndex\"\r\n      :currentSectionTotal=\"currentSectionTotal\"\r\n      :showPlay=\"showPlay\"\r\n      :isPlaying.sync=\"isPlaying\"\r\n      :playInfo=\"playInfo\"\r\n      @onPlayingCardClick=\"onPlayingCardClick\"\r\n    ></bottom>\r\n    <!-- 挂载电子书-->\r\n    <div class=\"book-wrapper\">\r\n      <div id=\"read\"></div>\r\n    </div>\r\n    <speak-window\r\n      :title=\"this.chapter ? this.chapter.label : ''\"\r\n      :book=\"book\"\r\n      :section=\"section\"\r\n      :currentSectionIndex.sync=\"currentSectionIndex\"\r\n      :currentSectionTotal=\"currentSectionTotal\"\r\n      :isPlaying.sync=\"isPlaying\"\r\n      :playInfo=\"playInfo\"\r\n      @updateText=\"updateText\"\r\n      ref=\"speakWindow\"\r\n    ></speak-window>\r\n  </div>\r\n</template>\r\n\r\n<script type=\"text/ecmascript-6\">\r\nimport DetailTitle from '../../components/detail/DetailTitle'\r\nimport BookInfo from '../../components/detail/BookInfo'\r\nimport Scroll from '../../components/common/Scroll'\r\nimport SpeakPlaying from '../../components/speak/SpeakPlaying'\r\nimport Bottom from '../../components/speak/SpeakBottom'\r\nimport SpeakWindow from '../../components/speak/SpeakMask'\r\nimport { findBook, getCategoryName } from '../../utils/store'\r\nimport { flatList } from '../../api/store'\r\nimport { getLocalForage } from '../../utils/localForage'\r\nimport { realPx } from '../../utils/utils'\r\nimport Epub from 'epubjs'\r\nimport CryptoJS from 'crypto-js'\r\n\r\nglobal.ePub = Epub\r\n\r\nconst APPID = '5b4da68b'\r\nconst API_SECRET = '48487e25de82a2c167eccda30f7a3c70'\r\nconst API_KEY = '7154170219e3e4426025afef812d070e'\r\nlet isChrome = navigator.userAgent.toLowerCase().match(/chrome/)\r\nlet notSupportTip = isChrome\r\n  ? '您的浏览器暂时不支持体验功能，请升级您的浏览器'\r\n  : '您现在使用的浏览器暂时不支持体验功能，<br />推荐使用谷歌浏览器Chrome'\r\n\r\nfunction getWebsocketUrl() {\r\n  return new Promise((resolve, reject) => {\r\n    var apiKey = API_KEY\r\n    var apiSecret = API_SECRET\r\n    var url = 'wss://tts-api.xfyun.cn/v2/tts'\r\n    var host = location.host\r\n    var date = new Date().toGMTString()\r\n    var algorithm = 'hmac-sha256'\r\n    var headers = 'host date request-line'\r\n    var signatureOrigin = `host: ${host}\\ndate: ${date}\\nGET /v2/tts HTTP/1.1`\r\n    var signatureSha = CryptoJS.HmacSHA256(signatureOrigin, apiSecret)\r\n    var signature = CryptoJS.enc.Base64.stringify(signatureSha)\r\n    var authorizationOrigin = `api_key=\"${apiKey}\", algorithm=\"${algorithm}\", headers=\"${headers}\", signature=\"${signature}\"`\r\n    var authorization = btoa(authorizationOrigin)\r\n    url = `${url}?authorization=${authorization}&date=${date}&host=${host}`\r\n    resolve(url)\r\n  })\r\n}\r\n\r\nlet audioCtx\r\nlet source\r\nlet btnState = {\r\n  unTTS: '立即合成',\r\n  ttsing: '正在合成',\r\n  endTTS: '立即播放',\r\n  play: '停止播放',\r\n  pause: '继续播放',\r\n  endPlay: '重新播放',\r\n  errorTTS: '合成失败'\r\n}\r\n\r\nclass Experience {\r\n  constructor({\r\n    speed = 50,\r\n    voice = 50,\r\n    pitch = 50,\r\n    text = '',\r\n    engineType = 'aisound',\r\n    voiceName = 'xiaoyan',\r\n    playBtn = '.js-base-play',\r\n    defaultText = ''\r\n  } = {}) {\r\n    this.speed = speed\r\n    this.voice = voice\r\n    this.pitch = pitch\r\n    this.text = text\r\n    this.defaultText = defaultText\r\n    this.engineType = engineType\r\n    this.voiceName = voiceName\r\n    this.playBtn = playBtn\r\n    this.playState = ''\r\n    this.audioDatas = []\r\n    this.pcmPlayWork = new Worker('./transform.worker.js')\r\n    this.pcmPlayWork.onmessage = e => {\r\n      this.onmessageWork(e)\r\n    }\r\n  }\r\n\r\n  setConfig({ speed, voice, pitch, text, defaultText, engineType, voiceName }) {\r\n    speed && (this.speed = speed)\r\n    voice && (this.voice = voice)\r\n    pitch && (this.pitch = pitch)\r\n    text && (this.text = text)\r\n    defaultText && (this.defaultText = defaultText)\r\n    engineType && (this.engineType = engineType)\r\n    voiceName && (this.voiceName = voiceName)\r\n    this.resetAudio()\r\n  }\r\n\r\n  onmessageWork(e) {\r\n    switch (e.data.command) {\r\n      case 'newAudioData': {\r\n        this.audioDatas.push(e.data.data)\r\n        if (this.playState === 'ttsing' && this.audioDatas.length === 1) {\r\n          this.playTimeout = setTimeout(() => {\r\n            this.audioPlay()\r\n          }, 1000)\r\n        }\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  setBtnState(state) {\r\n    let oldState = this.playState\r\n    this.playState = state\r\n  }\r\n\r\n  getAudio() {\r\n    this.setBtnState('ttsing')\r\n    getWebsocketUrl().then(url => {\r\n      this.connectWebsocket(url)\r\n    })\r\n  }\r\n\r\n  connectWebsocket(url) {\r\n    if ('WebSocket' in window) {\r\n      this.websocket = new WebSocket(url)\r\n    } else if ('MozWebSocket' in window) {\r\n      this.websocket = new MozWebSocket(url)\r\n    } else {\r\n      alert(notSupportTip)\r\n      return\r\n    }\r\n    let self = this\r\n    this.websocket.onopen = e => {\r\n      var params = {\r\n        common: {\r\n          app_id: APPID // APPID\r\n        },\r\n        business: {\r\n          ent: self.engineType,\r\n          aue: 'raw',\r\n          auf: 'audio/L16;rate=16000',\r\n          vcn: self.voiceName,\r\n          speed: self.speed,\r\n          volume: self.voice * 10,\r\n          pitch: self.pitch,\r\n          //'bgs': 1,\r\n          tte: 'UTF8'\r\n        },\r\n        data: {\r\n          status: 2,\r\n          text: Base64.encode(self.text || self.defaultText)\r\n        }\r\n      }\r\n      this.websocket.send(JSON.stringify(params))\r\n    }\r\n    this.websocket.onmessage = e => {\r\n      let jsonData = JSON.parse(e.data)\r\n      // 合成失败\r\n      if (jsonData.code !== 0) {\r\n        alert(`${jsonData.code}:${jsonData.message}`)\r\n        self.resetAudio()\r\n        this.websocket.close()\r\n        return\r\n      }\r\n      self.pcmPlayWork.postMessage({\r\n        command: 'transData',\r\n        data: jsonData.data.audio\r\n      })\r\n\r\n      if (jsonData.code === 0 && jsonData.data.status === 2) {\r\n        this.websocket.close()\r\n      }\r\n    }\r\n    this.websocket.onerror = e => {\r\n      //console.log(e)\r\n      //console.log(e.data)\r\n    }\r\n    this.websocket.onclose = e => {\r\n      //console.log(e)\r\n    }\r\n  }\r\n\r\n  resetAudio() {\r\n    this.audioPause()\r\n    this.setBtnState('unTTS')\r\n    this.audioDatasIndex = 0\r\n    this.audioDatas = []\r\n    this.websocket && this.websocket.close()\r\n    clearTimeout(this.playTimeout)\r\n  }\r\n\r\n  audioPlay() {\r\n    try {\r\n      if (!audioCtx) {\r\n        audioCtx = new (window.AudioContext || window.webkitAudioContext)()\r\n      }\r\n      if (!audioCtx) {\r\n        alert(notSupportTip)\r\n        return\r\n      }\r\n    } catch (e) {\r\n      alert(notSupportTip)\r\n      return\r\n    }\r\n    this.audioDatasIndex = 0\r\n    if (this.audioDatas.length) {\r\n      this.playSource()\r\n      this.setBtnState('play')\r\n    } else {\r\n      this.getAudio()\r\n    }\r\n  }\r\n\r\n  audioPause(state) {\r\n    if (this.playState === 'play') {\r\n      this.setBtnState(state || 'endPlay')\r\n    }\r\n    clearTimeout(this.playTimeout)\r\n    try {\r\n      source && source.stop()\r\n    } catch (e) {\r\n      //console.log(e)\r\n    }\r\n  }\r\n\r\n  playSource() {\r\n    let bufferLength = 0\r\n    let dataLength = this.audioDatas.length\r\n    for (let i = this.audioDatasIndex; i < dataLength; i++) {\r\n      bufferLength += this.audioDatas[i].length\r\n    }\r\n    let audioBuffer = audioCtx.createBuffer(1, bufferLength, 22050)\r\n    let offset = 0\r\n    let nowBuffering = audioBuffer.getChannelData(0)\r\n    for (let i = this.audioDatasIndex; i < dataLength; i++) {\r\n      let audioData = this.audioDatas[i]\r\n      if (audioBuffer.copyToChannel) {\r\n        audioBuffer.copyToChannel(audioData, 0, offset)\r\n      } else {\r\n        for (let j = 0; j < audioData.length; j++) {\r\n          nowBuffering[offset + j] = audioData[j]\r\n        }\r\n      }\r\n      offset += audioData.length\r\n      this.audioDatasIndex++\r\n    }\r\n\r\n    source = audioCtx.createBufferSource()\r\n    source.buffer = audioBuffer\r\n    source.connect(audioCtx.destination)\r\n    source.start()\r\n    source.onended = event => {\r\n      if (this.playState !== 'play') {\r\n        return\r\n      }\r\n      if (this.audioDatasIndex < this.audioDatas.length) {\r\n        this.playSource()\r\n      } else {\r\n        this.audioPause('endPlay')\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nlet experience = new Experience({\r\n  speed: 50,\r\n  voice: 50,\r\n  pitch: 50,\r\n  playBtn: `.audio-ctrl-btn`\r\n})\r\n\r\nexport default {\r\n  components: {\r\n    DetailTitle,\r\n    BookInfo,\r\n    Scroll,\r\n    SpeakPlaying,\r\n    Bottom,\r\n    SpeakWindow\r\n  },\r\n  computed: {\r\n    // 音频当前播放的分钟数\r\n    currentMinute() {\r\n      const m = Math.floor(this.currentPlayingTime / 60)\r\n      return m < 10 ? '0' + m : m\r\n    },\r\n    // 音频当前播放的秒数\r\n    currentSecond() {\r\n      const s = Math.floor(\r\n        this.currentPlayingTime - parseInt(this.currentMinute) * 60\r\n      )\r\n      return s < 10 ? '0' + s : s\r\n    },\r\n    // 音频的总时长\r\n    totalMinute() {\r\n      const m = Math.floor(this.totalPlayingTime / 60)\r\n      return m < 10 ? '0' + m : m\r\n    },\r\n    // 音频的总秒数\r\n    totalSecond() {\r\n      const s = Math.floor(\r\n        this.totalPlayingTime - parseInt(this.totalMinute) * 60\r\n      )\r\n      return s < 10 ? '0' + s : s\r\n    },\r\n    // 音频的剩余分钟数\r\n    leftMinute() {\r\n      const m = Math.floor(\r\n        (this.totalPlayingTime - this.currentPlayingTime) / 60\r\n      )\r\n      return m < 10 ? '0' + m : m\r\n    },\r\n    // 音频的剩余秒数\r\n    leftSecond() {\r\n      const s = Math.floor(\r\n        this.totalPlayingTime -\r\n          this.currentPlayingTime -\r\n          parseInt(this.leftMinute) * 60\r\n      )\r\n      return s < 10 ? '0' + s : s\r\n    },\r\n    // 播放信息对象\r\n    playInfo() {\r\n      if (this.audioCanPlay) {\r\n        return {\r\n          currentMinute: this.currentMinute,\r\n          currentSecond: this.currentSecond,\r\n          totalMinute: this.totalMinute,\r\n          totalSecond: this.totalSecond,\r\n          leftMinute: this.leftMinute,\r\n          leftSecond: this.leftSecond\r\n        }\r\n      } else {\r\n        return null\r\n      }\r\n    },\r\n    // 电子书的语种\r\n    lang() {\r\n      return this.metadata ? this.metadata.language : ''\r\n    },\r\n    // 当播放面板显示时，禁用滚动条（解决事件穿透问题）\r\n    disableScroll() {\r\n      if (this.$refs.speakWindow) {\r\n        return this.$refs.speakWindow.visible\r\n      } else {\r\n        return false\r\n      }\r\n    },\r\n    // 是否底部的播放面板\r\n    showPlay() {\r\n      return this.playingIndex >= 0\r\n    },\r\n    // 滚动条距底部距离，当显示播放面板时为116像素，不显示时为52像素\r\n    scrollBottom() {\r\n      return this.showPlay ? 116 : 52\r\n    },\r\n    // 当前章节信息\r\n    chapter() {\r\n      return this.flatNavigation[this.playingIndex]\r\n    },\r\n    // 电子书摘要信息\r\n    desc() {\r\n      if (this.description) {\r\n        return this.description.substring(0, 100)\r\n      } else {\r\n        return ''\r\n      }\r\n    },\r\n    // 一维数组的目录\r\n    flatNavigation() {\r\n      if (this.navigation) {\r\n        return Array.prototype.concat.apply(\r\n          [],\r\n          Array.prototype.concat.apply(\r\n            [],\r\n            this.doFlatNavigation(this.navigation.toc)\r\n          )\r\n        )\r\n      } else {\r\n        return []\r\n      }\r\n    },\r\n    // 电子书分类\r\n    category() {\r\n      return this.bookItem ? getCategoryName(this.bookItem.category) : ''\r\n    },\r\n    // 电子书书名\r\n    title() {\r\n      return this.metadata ? this.metadata.title : ''\r\n    },\r\n    // 电子书作者\r\n    author() {\r\n      return this.metadata ? this.metadata.creator : ''\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      bookItem: null,\r\n      book: null,\r\n      rendition: null,\r\n      metadata: null,\r\n      cover: null,\r\n      navigation: null,\r\n      description: null,\r\n      ifShowContent: true,\r\n      playingIndex: -1,\r\n      paragraph: null,\r\n      currentSectionIndex: null,\r\n      currentSectionTotal: null,\r\n      section: null,\r\n      isPlaying: false,\r\n      audio: null,\r\n      audioCanPlay: false,\r\n      currentPlayingTime: 0,\r\n      totalPlayingTime: 0,\r\n      playStatus: 0, // 0 - 未播放，1 - 播放中，2 - 暂停中\r\n      toastText: '',\r\n      isOnline: false\r\n    }\r\n  },\r\n  methods: {\r\n    // 在线语音合成\r\n    createVoice(text) {\r\n      console.log('在线语音合成', text)\r\n      if (text !== experience.text) {\r\n        experience.setConfig({\r\n          text\r\n        })\r\n      }\r\n      //console.log(experience)\r\n      if (experience.playState === 'play') {\r\n        experience.audioPause()\r\n        this.resetPlay()\r\n      } else {\r\n        experience.audioPlay()\r\n        this.isPlaying = true\r\n        this.playStatus = 1\r\n      }\r\n      // const xmlhttp = new XMLHttpRequest()\r\n      // // 创建HTTP请求，同步接收结果\r\n      // xmlhttp.open('GET', `${process.env.VUE_APP_VOICE_URL}/voice?text=${text}&lang=${this.lang.toLowerCase()}`, false)\r\n      // // 发送请求\r\n      // xmlhttp.send()\r\n      // // 获取响应内容\r\n      // const xmlDoc = xmlhttp.responseText\r\n      // if (xmlDoc) {\r\n      //   // 解析响应内容\r\n      //   const json = JSON.parse(xmlDoc)\r\n      //   if (json.path) {\r\n      //     // path为语音合成生成的MP3文件下载路径，将该路径赋值audio.src\r\n      //     // audio控件会自动加载音频文件\r\n      //     this.$refs.audio.src = json.path\r\n      //     // 自动播放MP3\r\n      //     this.continuePlay()\r\n      //   } else {\r\n      //     this.showToast('播放失败，未生成链接')\r\n      //   }\r\n      // } else {\r\n      //   this.showToast('播放失败')\r\n      // }\r\n    },\r\n    // 切换播放状态，如果处于播放状态则暂停，如果处于暂停状态，则播放\r\n    // 注意状态0和状态2是不通的\r\n    // 状态0 表示还未播放，所以需要先进行语音合成\r\n    // 状态2 表示已经合成，所以直接进行播放即可\r\n    togglePlay() {\r\n      if (!this.isPlaying) {\r\n        if (this.playStatus === 0) {\r\n          this.play()\r\n        } else if (this.playStatus === 2) {\r\n          this.continuePlay()\r\n        }\r\n      } else {\r\n        this.pausePlay()\r\n      }\r\n    },\r\n    // 生成语音合成的文本信息\r\n    speak(item, index) {\r\n      // 重置播放状态，停止一切播放\r\n      this.resetPlay()\r\n      this.playingIndex = index\r\n      this.$nextTick(() => {\r\n        this.$refs.scroll.refresh()\r\n        if (this.chapter) {\r\n          // 获取当前点击的章节信息\r\n          this.section = this.book.spine.get(this.chapter.href)\r\n          // 渲染章节\r\n          this.rendition.display(this.section.href).then(section => {\r\n            // 获取当前位置对象\r\n            const currentPage = this.rendition.currentLocation()\r\n            const cfibase = section.cfiBase\r\n            const cfistart = currentPage.start.cfi\r\n              .replace(/.*!/, '')\r\n              .replace(/\\)/, '')\r\n            const cfiend = currentPage.end.cfi\r\n              .replace(/.*!/, '')\r\n              .replace(/\\)/, '')\r\n            this.currentSectionIndex = currentPage.start.displayed.page\r\n            this.currentSectionTotal = currentPage.start.displayed.total\r\n            // 合成cfi信息\r\n            const cfi = `epubcfi(${cfibase}!,${cfistart},${cfiend})`\r\n            // console.log(currentPage, cfi, cfibase, cfistart, cfiend)\r\n            // 通过Book.getRange(cfi)方法获取指定片段的cfi对应的文本\r\n            this.book.getRange(cfi).then(range => {\r\n              // 获取章节片段的文本信息\r\n              let text = range.toLocaleString()\r\n              // 对文本信息进行过滤，去除其中的空格（注意是2个空格，1个空格是合理的）、换行符等特殊字符\r\n              text = text.replace(/\\s(2,)/g, '')\r\n              text = text.replace(/\\r/g, '')\r\n              text = text.replace(/\\n/g, '')\r\n              text = text.replace(/\\t/g, '')\r\n              text = text.replace(/\\f/g, '')\r\n              // 更新语音合成的文本信息\r\n              this.updateText(text)\r\n            })\r\n          })\r\n        }\r\n      })\r\n    },\r\n    // 重置播放状态\r\n    resetPlay() {\r\n      if (this.playStatus === 1) {\r\n        this.pausePlay()\r\n      }\r\n      this.isPlaying = false\r\n      this.playStatus = 0\r\n    },\r\n    // 从头开始语音合成并播放\r\n    play() {\r\n      this.createVoice(this.paragraph)\r\n    },\r\n    // 继续播放\r\n    continuePlay() {\r\n      this.$refs.audio.play().then(() => {\r\n        // 显示播放动画\r\n        this.$refs.speakPlaying[0].startAnimation()\r\n        this.isPlaying = true\r\n        this.playStatus = 1\r\n      })\r\n    },\r\n    // 暂停播放\r\n    pausePlay() {\r\n      this.$refs.audio.pause()\r\n      // 暂停播放动画\r\n      this.$refs.speakPlaying[0].stopAnimation()\r\n      this.isPlaying = false\r\n      this.playStatus = 2\r\n    },\r\n    // 当播放结束时，刷新播放信息\r\n    onAudioEnded() {\r\n      this.resetPlay()\r\n      this.currentPlayingTime = this.$refs.audio.currentTime\r\n      const percent = Math.floor(\r\n        (this.currentPlayingTime / this.totalPlayingTime) * 100\r\n      )\r\n      this.$refs.speakWindow.refreshProgress(percent)\r\n    },\r\n    // 当播放进行时，刷新播放信息\r\n    onTimeUpdate() {\r\n      this.currentPlayingTime = this.$refs.audio.currentTime\r\n      const percent = Math.floor(\r\n        (this.currentPlayingTime / this.totalPlayingTime) * 100\r\n      )\r\n      this.$refs.speakWindow.refreshProgress(percent)\r\n    },\r\n    // 调用audio.src时，audio控件会调用canplay事件\r\n    // 此时我们可以获取总播放时长和当前播放时长\r\n    onCanPlay() {\r\n      this.audioCanPlay = true\r\n      this.currentPlayingTime = this.$refs.audio.currentTime\r\n      this.totalPlayingTime = this.$refs.audio.duration\r\n    },\r\n    // 通过API找到当前电子书的详情数据\r\n    findBookFromList(fileName) {\r\n      flatList().then(response => {\r\n        if (response.status === 200) {\r\n          const bookList = response.data.data.filter(\r\n            item => item.fileName === fileName\r\n          )\r\n          if (bookList && bookList.length > 0) {\r\n            this.bookItem = bookList[0]\r\n            this.init()\r\n          }\r\n        }\r\n      })\r\n    },\r\n    // 初始化参数信息\r\n    init() {\r\n      const fileName = this.$route.query.fileName\r\n      if (!this.bookItem) {\r\n        this.bookItem = findBook(fileName)\r\n      }\r\n      if (this.bookItem) {\r\n        // 如果电子书已经缓存，则直接从IndexedDB数据库中获取\r\n        getLocalForage(fileName, (err, blob) => {\r\n          if (err || !blob) {\r\n            // 如果获取缓存失败，则拼接opf文件来获取电子书\r\n            this.isOnline = true\r\n            const opf = this.$route.query.opf\r\n            if (opf) {\r\n              this.parseBook(opf)\r\n            }\r\n          } else {\r\n            this.isOnline = false\r\n            // 解析电子书\r\n            this.parseBook(blob)\r\n          }\r\n        })\r\n      } else {\r\n        this.findBookFromList(fileName)\r\n      }\r\n    },\r\n    // 解析电子书\r\n    parseBook(blob) {\r\n      // 解析电子书\r\n      this.book = new Epub(blob)\r\n      // 获取电子书的metadata\r\n      this.book.loaded.metadata.then(metadata => {\r\n        this.metadata = metadata\r\n      })\r\n      // 如果是在线获取的电子书，则通过Book.coverUrl()方法获取封面链接\r\n      if (this.isOnline) {\r\n        this.book.coverUrl().then(url => {\r\n          this.cover = url\r\n        })\r\n      } else {\r\n        // 如果是本地获取的电子书，通过Book.loaded.cover方法获取封面链接（加快封面获取速度）\r\n        this.book.loaded.cover.then(cover => {\r\n          this.book.archive.createUrl(cover).then(url => {\r\n            this.cover = url\r\n          })\r\n        })\r\n      }\r\n      // 获取电子书的目录信息\r\n      this.book.loaded.navigation.then(nav => {\r\n        this.navigation = nav\r\n      })\r\n      // 渲染电子书\r\n      this.display()\r\n    },\r\n    back() {\r\n      this.$router.go(-1)\r\n    },\r\n    // 处理滚动条的事件，决定标题阴影是否展示\r\n    onScroll(offsetY) {\r\n      if (offsetY > realPx(42)) {\r\n        this.$refs.title.showShadow()\r\n      } else {\r\n        this.$refs.title.hideShadow()\r\n      }\r\n    },\r\n    toggleContent() {\r\n      this.ifShowContent = !this.ifShowContent\r\n    },\r\n    // 渲染电子书\r\n    display() {\r\n      const height =\r\n        window.innerHeight * 0.9 -\r\n        realPx(40) -\r\n        realPx(54) -\r\n        realPx(46) -\r\n        realPx(48) -\r\n        realPx(60) -\r\n        realPx(44)\r\n      this.rendition = this.book.renderTo('read', {\r\n        width: window.innerWidth,\r\n        height: height,\r\n        method: 'default'\r\n      })\r\n      this.rendition.display()\r\n    },\r\n    doFlatNavigation(content, deep = 1) {\r\n      const arr = []\r\n      content.forEach(item => {\r\n        item.deep = deep\r\n        arr.push(item)\r\n        if (item.subitems && item.subitems.length > 0) {\r\n          arr.push(this.doFlatNavigation(item.subitems, deep + 1))\r\n        }\r\n      })\r\n      return arr\r\n    },\r\n    showToast(text) {\r\n      this.simpleToast(text)\r\n    },\r\n    onPlayingCardClick() {\r\n      this.$refs.speakWindow.show()\r\n    },\r\n    updateText(text) {\r\n      this.paragraph = text\r\n    }\r\n  },\r\n  mounted() {\r\n    this.init()\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" rel=\"stylesheet/scss\" scoped>\r\n@import \"../../assets/styles/global\";\r\n\r\n.book-speaking {\r\n  font-size: px2rem(16);\r\n  width: 100%;\r\n  background: white;\r\n\r\n  .content-wrapper {\r\n    width: 100%;\r\n\r\n    .book-speak-title-wrapper {\r\n      display: flex;\r\n      padding: px2rem(15);\r\n      box-sizing: border-box;\r\n      border-bottom: px2rem(1) solid #eee;\r\n\r\n      .icon-speak-wrapper {\r\n        flex: 0 0 px2rem(40);\r\n        @include left;\r\n\r\n        .icon-speak {\r\n          font-size: px2rem(24);\r\n          color: #999;\r\n        }\r\n      }\r\n\r\n      .speak-title-wrapper {\r\n        flex: 1;\r\n        @include left;\r\n\r\n        .speak-title {\r\n          font-size: px2rem(16);\r\n          font-weight: bold;\r\n          color: #666;\r\n        }\r\n      }\r\n\r\n      .icon-down-wrapper {\r\n        flex: 0 0 px2rem(40);\r\n        @include right;\r\n\r\n        .icon-up {\r\n          font-size: px2rem(12);\r\n          color: #999;\r\n        }\r\n\r\n        .icon-down2 {\r\n          font-size: px2rem(12);\r\n          color: #999;\r\n        }\r\n      }\r\n    }\r\n\r\n    .book-detail-content-wrapper {\r\n      width: 100%;\r\n      border-bottom: px2rem(1) solid #eee;\r\n      box-sizing: border-box;\r\n\r\n      .book-detail-content-list-wrapper {\r\n        padding: px2rem(10) px2rem(15);\r\n\r\n        .loading-text-wrapper {\r\n          width: 100%;\r\n\r\n          .loading-text {\r\n            font-size: px2rem(14);\r\n            color: #999;\r\n          }\r\n        }\r\n\r\n        .book-detail-content-item-wrapper {\r\n          .book-detail-content-item {\r\n            display: flex;\r\n            padding: px2rem(15) 0;\r\n            font-size: px2rem(14);\r\n            line-height: px2rem(16);\r\n            color: #333;\r\n            border-bottom: px2rem(1) solid #eee;\r\n\r\n            &:last-child {\r\n              border-bottom: none;\r\n            }\r\n\r\n            .book-detail-content-navigation-text {\r\n              flex: 1;\r\n              width: 100%;\r\n              @include ellipsis;\r\n\r\n              &.is-playing {\r\n                color: $color-blue;\r\n                font-weight: bold;\r\n                margin-left: px2rem(10);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  .book-wrapper {\r\n    position: absolute;\r\n    bottom: -100%;\r\n    z-index: 100;\r\n  }\r\n}\r\n</style>\r\n"]}]}